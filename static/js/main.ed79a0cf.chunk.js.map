{"version":3,"sources":["UI/LeftPanel.tsx","UI/OperationsPanel.tsx","UI/TopInfoPanel.tsx","UI/RightPanel.tsx","UI/PartsPanel.tsx","UI/Part.tsx","UI/MainWindow.tsx","UI/ReactorPanel.tsx","UI/ReactorCell.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LeftPanel","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSelectedPartChange","bind","assertThisInitialized","inherits","createClass","key","value","react_default","a","createElement","className","OperationsPanel_OperationsPanel","PartsPanel_PartsPanel","parts","selectedPart","onSelectedPartChange","part","React","Component","OperationsPanel","apply","arguments","TopInfoPanel","RightPanel","TopInfoPanel_TopInfoPanel","ReactorPanel_ReactorPanel","reactorProps","PartsPanel","rows","length","grid","Array","y","x","p","Part_Part","id","map","partsRow","rowIndex","Part","isSelected","title","name","onClick","symbol","isAlreadySelected","MainWindow","state","LeftPanel_LeftPanel","RightPanel_RightPanel","reactorDefinition","setState","ReactorPanel","Rows","Cols","ReactorCell_ReactorCell","reactorRow","reactorCell","ReactorCell","placedPart","handleClick","_this2","onContextMenu","e","handleContextMenu","partVisual","console","debug","concat","cloneDeep","preventDefault","get","App","MainWindow_MainWindow","Parts","ReactorDefinition","category","description","baseCost","baseDurability","basePower","baseHeat","stage","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed79a0cf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as Models from \"../Models\";\r\nimport * as UI from \"./\";\r\n\r\ninterface ILeftPanelProps {\r\n    parts: Models.IPartDef[];\r\n    selectedPart?: Models.IPartDef;\r\n    onSelectedPartChange(part: Models.IPartDef): void;\r\n}\r\n\r\ninterface ILeftPanelState {\r\n}\r\n\r\nexport class LeftPanel extends React.Component<ILeftPanelProps, ILeftPanelState> {\r\n    constructor(props: ILeftPanelProps) {\r\n        super(props);\r\n\r\n        this.handleSelectedPartChange = this.handleSelectedPartChange.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"LeftPanel\">\r\n                <UI.OperationsPanel />\r\n                <UI.PartsPanel parts={this.props.parts} selectedPart={this.props.selectedPart} onSelectedPartChange={this.handleSelectedPartChange} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleSelectedPartChange(part: Models.IPartDef) {\r\n        this.props.onSelectedPartChange(part);\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport class OperationsPanel extends React.Component<{}, {}> {\r\n    render() {\r\n        return (<div className=\"OperationsPanel\"></div>);\r\n    };\r\n}","import React from \"react\";\r\n\r\nexport class TopInfoPanel extends React.Component<{}, {}> {\r\n    render() {\r\n        return (<div className=\"TopInfoPanel\"></div>);\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport * as Models from \"../Models\";\r\nimport * as UI from \"./\";\r\n\r\ninterface IRightPanelProps {\r\n    reactorProps: any;\r\n    selectedPart?: Models.IPartDef;\r\n}\r\n\r\ninterface IRightPanelState {\r\n}\r\n\r\nexport class RightPanel extends React.Component<IRightPanelProps, IRightPanelState> {\r\n    render() {\r\n        return (\r\n            <div className=\"RightPanel\">\r\n                <UI.TopInfoPanel />\r\n                <UI.ReactorPanel reactorProps={this.props.reactorProps} selectedPart={this.props.selectedPart} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport * as Models from \"../Models\";\r\nimport * as UI from \"./\";\r\n\r\ninterface IPartsPanelProps {\r\n    parts: Models.IPartDef[];\r\n    selectedPart?: Models.IPartDef;\r\n    onSelectedPartChange(part: Models.IPartDef): void;\r\n}\r\n\r\ninterface IPartsPanelState {\r\n}\r\n\r\nexport class PartsPanel extends React.Component<IPartsPanelProps, IPartsPanelState> {\r\n    constructor(props: IPartsPanelProps) {\r\n        super(props);\r\n\r\n        this.handleSelectedPartChange = this.handleSelectedPartChange.bind(this);\r\n    }\r\n\r\n    render() {\r\n        const parts = this.props.parts;\r\n        const cols = 3;\r\n        const rows = parts.length / cols;\r\n\r\n        let grid = new Array(rows);\r\n\r\n        for (let y = 0; y < rows; y++) {\r\n            grid[y] = new Array(cols);\r\n            for (let x = 0; x < cols; x++) {\r\n                let p = parts[y * cols + x];\r\n                grid[y][x] = <UI.Part part={p} key={p.id} selectedPart={this.props.selectedPart} onSelectedPartChange={this.handleSelectedPartChange} />;\r\n            }\r\n        }\r\n\r\n        return (<div className=\"PartsPanel\">{grid.map((partsRow, rowIndex) =>\r\n            <div className=\"parts-row\" key={\"ReactorRow_\" + rowIndex}>\r\n                {partsRow.map((part: Models.IPartDef) => part)}\r\n            </div>\r\n        )}</div>)\r\n    };\r\n\r\n    handleSelectedPartChange(part: Models.IPartDef) {\r\n        this.props.onSelectedPartChange(part);\r\n    }\r\n}","import React from \"react\";\r\nimport * as Models from \"../Models\";\r\n\r\ninterface IPartProps {\r\n    part: Models.IPartDef;\r\n    selectedPart?: Models.IPartDef;\r\n    onSelectedPartChange(part: Models.IPartDef | null): void;\r\n}\r\n\r\ninterface IPartState {\r\n}\r\n\r\nexport class Part extends React.Component<IPartProps, IPartState> {\r\n    render() {\r\n        const p = this.props.part;\r\n        const isSelected = this.props.selectedPart ? this.props.selectedPart.id === p.id : false;\r\n\r\n        return (\r\n            <div className={\"Part \" + (isSelected ? \"selected\" : \"\")} title={p.name} onClick={() => this.handleSelectedPartChange(p, isSelected)}>{p.symbol}</div>\r\n        );\r\n    }\r\n\r\n    handleSelectedPartChange(part: Models.IPartDef | null, isAlreadySelected: boolean) {\r\n        this.props.onSelectedPartChange(isAlreadySelected ? null : part);\r\n    }\r\n}","import React from \"react\";\r\nimport * as Models from \"../Models\";\r\nimport * as UI from \".\";\r\n\r\ninterface IMainWindowParts {\r\n    parts: Models.IPartDef[];\r\n    reactorDefinition: Models.IReactorProperties;\r\n}\r\n\r\ninterface IMainWindowState {\r\n    selectedPart?: Models.IPartDef;\r\n}\r\n\r\nexport class MainWindow extends React.Component<IMainWindowParts, IMainWindowState> {\r\n    constructor(props: IMainWindowParts) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n        this.handleSelectedPartChange = this.handleSelectedPartChange.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"MainWindow\" >\r\n                <UI.LeftPanel parts={this.props.parts} selectedPart={this.state.selectedPart} onSelectedPartChange={this.handleSelectedPartChange} />\r\n                <UI.RightPanel reactorProps={this.props.reactorDefinition} selectedPart={this.state.selectedPart} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleSelectedPartChange(part: Models.IPartDef) {\r\n        this.setState({ selectedPart: part });\r\n    }\r\n}","import React from \"react\";\r\nimport * as Models from \"../Models\";\r\nimport * as UI from \"./\";\r\n\r\ninterface IReactorPanelProps {\r\n    reactorProps: Models.IReactorProperties;\r\n    selectedPart?: Models.IPartDef;\r\n}\r\n\r\ninterface IReactorPanelState {\r\n}\r\n\r\nexport class ReactorPanel extends React.Component<IReactorPanelProps, IReactorPanelState> {\r\n    render() {\r\n        const props = this.props.reactorProps;\r\n        let grid = new Array(props.Rows);\r\n\r\n        for (let y = 0; y < props.Rows; y++) {\r\n            grid[y] = new Array(props.Cols);\r\n            for (let x = 0; x < props.Cols; x++) {\r\n                grid[y][x] =\r\n                    <UI.ReactorCell x={x} y={y} key={\"ReactorCell_\" + x + \"_\" + y} selectedPart={this.props.selectedPart} />;\r\n            }\r\n        }\r\n\r\n        return (<div className=\"ReactorPanel\">{grid.map((reactorRow, rowIndex) =>\r\n            <div className=\"reactor-row\" key={\"ReactorRow_\" + rowIndex}>\r\n                {reactorRow.map((reactorCell: UI.ReactorCell) => reactorCell)}\r\n            </div>\r\n        )}</div>)\r\n    };\r\n}","import React from \"react\";\r\nimport * as Models from \"../Models\";\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\n\r\ninterface IReactorCellProps {\r\n    selectedPart?: Models.IPartDef;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface IReactorCellState {\r\n    placedPart: Models.IPartDef | null;\r\n}\r\n\r\nexport class ReactorCell extends React.Component<IReactorCellProps, IReactorCellState> {\r\n    constructor(props: IReactorCellProps) {\r\n        super(props)\r\n\r\n        this.state = { placedPart: null };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    render() {\r\n        let x = this.props.x, y = this.props.y;\r\n        return (<div className=\"ReactorCell\" key={\"ReactorCell_\" + x + \"_\" + y} onClick={this.handleClick} onContextMenu={(e: React.MouseEvent) => this.handleContextMenu(e)}>{this.partVisual}</div>);\r\n    }\r\n\r\n    handleClick() {\r\n        console.debug(`Cell (${this.props.y},${this.props.x}) clicked.`);\r\n        if (!this.state.placedPart && this.props.selectedPart) {\r\n            this.setState({ placedPart: cloneDeep(this.props.selectedPart) });\r\n        }\r\n    }\r\n\r\n    handleContextMenu(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n\r\n        if (this.state.placedPart) {\r\n            this.setState({ placedPart: null });\r\n        }\r\n    }\r\n\r\n    get partVisual() {\r\n        const p = this.state.placedPart;\r\n        return p ? p.symbol : \"\";\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport * as UI from \"./UI\";\r\nimport * as Models from \"./Models\";\r\n\r\nimport './App.scss';\r\nimport './UI.scss';\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <UI.MainWindow parts={Parts} reactorDefinition={ReactorDefinition} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ReactorDefinition: Models.IReactorProperties = {\r\n  Rows: 10,\r\n  Cols: 10\r\n};\r\n\r\nconst Parts: Models.IPartDef[] = [\r\n  //Uranium Cells are specific and needs to be treated separately because their cost\r\n  //is not conforming to the unified cost calculation function\r\n  {\r\n    category: 'FuelCell',\r\n    id: \"cu1\",\r\n    name: \"Single Uranium Cell\",\r\n    description: \"Basic fuel cell. Generates 1 power and 1 heat\",\r\n    symbol: \"[U1]\",\r\n    baseCost: 10,\r\n    baseDurability: 15,\r\n    basePower: 1,\r\n    baseHeat: 1,\r\n    stage: 1\r\n  },\r\n  {\r\n    category: 'FuelCell',\r\n    id: \"cu2\",\r\n    name: \"Double Uranium Cell\",\r\n    description: \"Basic fuel cell. Generates 4 power and 8 heat\",\r\n    symbol: \"[U2]\",\r\n    baseCost: 25,\r\n    baseDurability: 15,\r\n    basePower: 4,\r\n    baseHeat: 8,\r\n    stage: 2\r\n  },\r\n  {\r\n    category: 'FuelCell',\r\n    id: \"cu3\",\r\n    name: \"Quad Uranium Cell\",\r\n    description: \"Basic fuel cell. Generates 12 power and 36 heat\",\r\n    symbol: \"[U4]\",\r\n    baseCost: 60,\r\n    baseDurability: 15,\r\n    basePower: 12,\r\n    baseHeat: 36,\r\n    stage: 3\r\n  }\r\n];","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\ninterface IServiceWorkerConfig {\r\n  onUpdate(arg: any): any;\r\n  onSuccess(arg: any): any;\r\n}\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config: IServiceWorkerConfig) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config: IServiceWorkerConfig) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: IServiceWorkerConfig) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}