{"version":3,"sources":["UI.js","App.js","serviceWorker.js","index.js"],"names":["MainWindow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedPart","handleSelectedPartChange","bind","assertThisInitialized","react_default","a","createElement","className","UI_LeftPanel","parts","Parts","onSelectedPartChange","UI_RightPanel","reactorProps","ReactorProps","part","setState","React","Component","LeftPanel","_this2","UI_OperationsPanel","UI_PartsPanel","RightPanel","UI_TopInfoPanel","UI_ReactorPanel","OperationsPanel","PartsPanel","_this3","rows","length","grid","Array","y","x","p","UI_PartUI","key","id","map","partsRow","rowIndex","PartUI","_this4","isSelected","title","name","onClick","symbol","isAlreadySelected","TopInfoPanel","ReactorPanel","Rows","Cols","UI_ReactorCell","reactorRow","reactorCell","ReactorCell","_this5","placedPart","handleClick","_this6","onContextMenu","e","handleContextMenu","partVisual","console","debug","concat","cloneDeep","preventDefault","category","App","UI_MainWindow","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42b601e3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\n\r\nimport './UI.scss';\r\n\r\nexport default class MainWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedPart: null\r\n        };\r\n\r\n        this.handleSelectedPartChange = this.handleSelectedPartChange.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"MainWindow\">\r\n                <LeftPanel parts={Parts} selectedPart={this.state.selectedPart} onSelectedPartChange={this.handleSelectedPartChange} />\r\n                <RightPanel reactorProps={ReactorProps} selectedPart={this.state.selectedPart} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleSelectedPartChange(part) {\r\n        this.setState({ selectedPart: part });\r\n    }\r\n}\r\n\r\nclass LeftPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSelectedPartChange = this.handleSelectedPartChange.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"LeftPanel\">\r\n                <OperationsPanel />\r\n                <PartsPanel parts={this.props.parts} selectedPart={this.props.selectedPart} onSelectedPartChange={this.handleSelectedPartChange} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleSelectedPartChange(part) {\r\n        this.props.onSelectedPartChange(part);\r\n    }\r\n}\r\n\r\nclass RightPanel extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"RightPanel\">\r\n                <TopInfoPanel />\r\n                <ReactorPanel reactorProps={this.props.reactorProps} selectedPart={this.props.selectedPart} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass OperationsPanel extends React.Component {\r\n    render() {\r\n        return (<div className=\"OperationsPanel\"></div>);\r\n    };\r\n}\r\n\r\nclass PartsPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSelectedPartChange = this.handleSelectedPartChange.bind(this);\r\n    }\r\n\r\n    render() {\r\n        const parts = this.props.parts;\r\n        const cols = 4;\r\n        const rows = parts.length / cols;\r\n\r\n        let grid = new Array(rows);\r\n\r\n        for (let y = 0; y < rows; y++) {\r\n            grid[y] = new Array(cols);\r\n            for (let x = 0; x < cols; x++) {\r\n                let p = parts[y * cols + x];\r\n                grid[y][x] = <PartUI part={p} key={p.id} selectedPart={this.props.selectedPart} onSelectedPartChange={this.handleSelectedPartChange} />;\r\n            }\r\n        }\r\n\r\n        return (<div className=\"PartsPanel\">{grid.map((partsRow, rowIndex) =>\r\n            <div className=\"parts-row\" key={\"ReactorRow_\" + rowIndex}>\r\n                {partsRow.map((part) => part)}\r\n            </div>\r\n        )}</div>)\r\n    };\r\n\r\n    handleSelectedPartChange(part) {\r\n        this.props.onSelectedPartChange(part);\r\n    }\r\n}\r\n\r\nclass PartUI extends React.Component {\r\n    render() {\r\n        const p = this.props.part;\r\n        const isSelected = this.props.selectedPart ? this.props.selectedPart.id === p.id : false;\r\n\r\n        return (\r\n            <div className={\"PartUI \" + (isSelected ? \"selected\" : \"\")} title={p.name} onClick={() => this.handleSelectedPartChange(p, isSelected)}>{p.symbol}</div>\r\n        );\r\n    }\r\n\r\n    handleSelectedPartChange(part, isAlreadySelected) {\r\n        this.props.onSelectedPartChange(isAlreadySelected ? null : part);\r\n    }\r\n}\r\n\r\nclass TopInfoPanel extends React.Component {\r\n    render() {\r\n        return (<div className=\"TopInfoPanel\"></div>);\r\n    };\r\n}\r\n\r\nclass ReactorPanel extends React.Component {\r\n    render() {\r\n        const props = this.props.reactorProps;\r\n        let grid = new Array(props.Rows);\r\n\r\n        for (let y = 0; y < props.Rows; y++) {\r\n            grid[y] = new Array(props.Cols);\r\n            for (let x = 0; x < props.Cols; x++) {\r\n                grid[y][x] =\r\n                    <ReactorCell x={x} y={y} key={\"ReactorCell_\" + x + \"_\" + y} selectedPart={this.props.selectedPart} />;\r\n            }\r\n        }\r\n\r\n        return (<div className=\"ReactorPanel\">{grid.map((reactorRow, rowIndex) =>\r\n            <div className=\"reactor-row\" key={\"ReactorRow_\" + rowIndex}>\r\n                {reactorRow.map((reactorCell) => reactorCell)}\r\n            </div>\r\n        )}</div>)\r\n    };\r\n}\r\n\r\nclass ReactorCell extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            placedPart: null\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    render() {\r\n        let x = this.props.x, y = this.props.y;\r\n        return (<div className=\"ReactorCell\" key={\"ReactorCell_\" + x + \"_\" + y} onClick={this.handleClick} onContextMenu={(e) => this.handleContextMenu(e)}>{this.partVisual}</div>);\r\n    }\r\n\r\n    handleClick() {\r\n        console.debug(`Cell (${this.props.y},${this.props.x}) clicked.`);\r\n        if (!this.state.placedPart && this.props.selectedPart) {\r\n            this.setState({ placedPart: cloneDeep(this.props.selectedPart) });\r\n        }\r\n    }\r\n\r\n    handleContextMenu(e) {\r\n        e.preventDefault();\r\n\r\n        if (this.state.placedPart) {\r\n            this.setState({ placedPart: null });\r\n        }\r\n    }\r\n\r\n    get partVisual() {\r\n        const p = this.state.placedPart;\r\n        return p ? p.symbol : \"\";\r\n    }\r\n}\r\n\r\nconst ReactorProps = {\r\n    Cols: 10,\r\n    Rows: 10\r\n};\r\n\r\nconst Parts = [\r\n    { category: \"PowerCell\", id: \"0001\", name: \"Cell 1\", symbol: \"[X1]\" },\r\n    { category: \"PowerCell\", id: \"0002\", name: \"Cell 2\", symbol: \"[X2]\" },\r\n    { category: \"PowerCell\", id: \"0003\", name: \"Cell 3\", symbol: \"[X3]\" },\r\n    { category: \"PowerCell\", id: \"0004\", name: \"Cell 4\", symbol: \"[X4]\" },\r\n    { category: \"PowerCell\", id: \"0005\", name: \"Cell 5\", symbol: \"[Y1]\" },\r\n    { category: \"PowerCell\", id: \"0006\", name: \"Cell 6\", symbol: \"[Y2]\" },\r\n    { category: \"PowerCell\", id: \"0007\", name: \"Cell 7\", symbol: \"[Y3]\" },\r\n    { category: \"PowerCell\", id: \"0008\", name: \"Cell 8\", symbol: \"[Y4]\" }\r\n];","import React from \"react\";\nimport MainWindow from \"./UI\";\n\nimport './App.scss';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainWindow />\n      </div>\n    );\n  }\n\n  // handlePartSelect(part) {\n  //   console.debug(\"Part selected\", part);\n  //   this.setState({ selectedPart: part });\n  //   this.refs.rc.handlePartSelected(part);\n  // }\n\n  // handleReactorCellClick(reactorCell) {\n  //   reactorCell.setState({ part: this.state.selectedPart });\n  // }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}